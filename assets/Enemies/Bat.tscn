[gd_scene load_steps=25 format=2]

[ext_resource path="res://assets/Enemies/Bat.png" type="Texture" id=1]
[ext_resource path="res://assets/Shadows/SmallShadow.png" type="Texture" id=2]
[ext_resource path="res://assets/CollisionBoxes/Hurtbox.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/Enemies/EnemyStats.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/Enemies/PlayerDetectionZone.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/CollisionBoxes/Hitbox.tscn" type="PackedScene" id=6]
[ext_resource path="res://assets/CollisionBoxes/SoftCollision.tscn" type="PackedScene" id=7]
[ext_resource path="res://assets/Enemies/WanderController.tscn" type="PackedScene" id=8]
[ext_resource path="res://assets/WhiteColor.shader" type="Shader" id=9]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

const EnemyDeathEffect = preload(\"res://assets/Effects/EnemyDeathEffect.tscn\")
const ExpNotice = preload(\"res://assets/UI/ExpNotice.tscn\")

export var ACCELERATION = 300
export var MAX_SPEED = 40
export var WANDER_SPEED = 20
export var FRICTION = 240
export var WANDER_TARGET_RANGE = 4

enum {
	IDLE,
	WANDER,
	CHASE,
	DEAD
}

var rng = RandomNumberGenerator.new()
var velocity = Vector2.ZERO
var knockback = Vector2.ZERO

var state = IDLE
var experience_pool = 110

onready var stats = $BatStats
onready var timer = $Timer
onready var sprite = $AnimatedSprite
onready var tween = $Tween
onready var hitbox = $Hitbox
onready var hurtbox = $Hurtbox
onready var playerDetectionZone = $PlayerDetectionZone
onready var softCollision = $SoftCollision
onready var wanderController = $WanderController
onready var animationPlayer = $AnimationPlayer
onready var player = get_parent().get_node(\"Player\")

func _ready():
	rng.randomize()
	sprite.frame = rng.randi_range(0, 4)
	sprite.speed_scale = 1

func _physics_process(delta):
	knockback = knockback.move_toward(Vector2.ZERO, FRICTION * delta) # knockback friction
	knockback = move_and_slide(knockback)
	
	match state:
		IDLE:
			velocity = velocity.move_toward(Vector2.ZERO, FRICTION * delta)
			seek_player()
			if wanderController.get_time_left() == 0:
				update_wander_state()
				
		WANDER:
			seek_player()
			if wanderController.get_time_left() == 0:
				update_wander_state()
			accelerate_towards_point(wanderController.target_position, WANDER_SPEED, delta)
			if global_position.distance_to(wanderController.target_position) <= WANDER_TARGET_RANGE: # when enemy arrives at its wander target
				update_wander_state()
				
		CHASE:
			var player = playerDetectionZone.player
			if player != null:
				accelerate_towards_point(player.global_position, MAX_SPEED, delta) # gets the direction by comparing the enemy position with the player's
			else:
				sprite.speed_scale = 1
				state = IDLE
				
		DEAD:
			velocity = velocity.move_toward(Vector2.ZERO, FRICTION * delta)
				
	sprite.flip_h = velocity.x < 0
	
	if softCollision.is_colliding():
		velocity += softCollision.get_push_vector() * delta * 400
		
	velocity = move_and_slide(velocity)
			
func accelerate_towards_point(point, speed, delta):
	var direction = global_position.direction_to(point) # gets the direction by grabbing the target position in the WanderController
	velocity = velocity.move_toward(direction * speed, ACCELERATION * delta) # multiplies that by the WANDER_SPEED value

func seek_player():
	if playerDetectionZone.can_see_player():
		sprite.speed_scale = 2
		state = CHASE
		
func update_wander_state():
	state = pick_random_state([IDLE, WANDER]) # feeds an array with the IDLE and WANDER states as its argument
	wanderController.start_wander_timer(rand_range(1, 3))
		
func pick_random_state(state_list): 
	state_list.shuffle() # shuffles the order of the list of states recieved
	return state_list.pop_front() # spits one out

func _on_Hurtbox_area_entered(area): # runs when a hitbox enters the bat's hurtbox
	stats.health -= area.damage # does damage equal to the variable exported by the sword hitbox's script
	hurtbox.create_hit_effect()
	hurtbox.start_invincibility(0.4)
	
	sprite.modulate = Color(1,1,0)
	if stats.health > 0:
		knockback = area.knockback_vector * 100 # knockback velocity
		tween.interpolate_property(sprite,
		\"modulate\",
		Color(1, 1, 0),
		Color(1, 1, 1),
		0.2,
		Tween.TRANS_LINEAR,
		Tween.EASE_IN
		)
		tween.start()
	else:
		knockback = area.knockback_vector * 200 # knockback velocity on killing blow

func _on_BatStats_no_health():
	sprite.playing = false # stop animation
	hurtbox.set_deferred(\"monitoring\", false) # turn off hurtbox
	hitbox.queue_free()
	state = DEAD
	player.enemy_killed(experience_pool)
	
	tween.interpolate_property(sprite,
	\"offset:y\",
	-12,
	0,
	0.5,
	Tween.TRANS_QUART,
	Tween.EASE_IN
	)
	
	tween.interpolate_property(sprite,
	\"modulate\",
	Color(1, 1, 0),
	Color(1, 0, 0),
	0.5,
	Tween.TRANS_LINEAR,
	Tween.EASE_IN
	)
	tween.start()
	
	timer.start()
	yield(timer, \"timeout\")
	
	var enemyDeathEffect = EnemyDeathEffect.instance()
	get_parent().add_child(enemyDeathEffect)
	enemyDeathEffect.global_position = global_position
	
	var expNotice = ExpNotice.instance()
	expNotice.rect_position = global_position
	expNotice.expDisplay = experience_pool
	get_node(\"/root\").add_child(expNotice)
	
	queue_free()

func _on_Hurtbox_invincibility_started():
	animationPlayer.play(\"Start\")

func _on_Hurtbox_invincibility_ended():
	animationPlayer.play(\"Stop\")
"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 9 )
shader_param/active = false

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 1 )
region = Rect2( 0, 0, 16, 24 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 1 )
region = Rect2( 16, 0, 16, 24 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 1 )
region = Rect2( 32, 0, 16, 24 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 1 )
region = Rect2( 48, 0, 16, 24 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 1 )
region = Rect2( 64, 0, 16, 24 )

[sub_resource type="SpriteFrames" id=8]
animations = [ {
"frames": [  ],
"loop": true,
"name": "default",
"speed": 5.0
}, {
"frames": [ SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ) ],
"loop": true,
"name": "fly",
"speed": 10.0
} ]

[sub_resource type="CircleShape2D" id=9]
radius = 4.0

[sub_resource type="CircleShape2D" id=10]
radius = 9.0

[sub_resource type="CircleShape2D" id=11]
radius = 56.0089

[sub_resource type="CircleShape2D" id=12]
radius = 3.16228

[sub_resource type="CircleShape2D" id=13]
radius = 5.0

[sub_resource type="Animation" id=14]
resource_name = "Start"
length = 0.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:material:shader_param/active")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="Animation" id=15]
resource_name = "Stop"
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:material:shader_param/active")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[node name="Bat" type="KinematicBody2D"]
collision_layer = 16
script = SubResource( 1 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
material = SubResource( 2 )
frames = SubResource( 8 )
animation = "fly"
playing = true
offset = Vector2( 0, -12 )

[node name="ShadowSprite" type="Sprite" parent="."]
texture = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 9 )

[node name="BatStats" parent="." instance=ExtResource( 4 )]

[node name="Hurtbox" parent="." instance=ExtResource( 3 )]
visible = false
collision_layer = 8

[node name="CollisionShape2D" parent="Hurtbox" index="0"]
position = Vector2( 0, -14 )
shape = SubResource( 10 )

[node name="Timer" type="Timer" parent="."]
wait_time = 0.5

[node name="Tween" type="Tween" parent="."]

[node name="PlayerDetectionZone" parent="." instance=ExtResource( 5 )]

[node name="CollisionShape2D" parent="PlayerDetectionZone" index="0"]
modulate = Color( 1, 0, 0, 0.196078 )
shape = SubResource( 11 )

[node name="Hitbox" parent="." instance=ExtResource( 6 )]
collision_mask = 4

[node name="CollisionShape2D" parent="Hitbox" index="0"]
shape = SubResource( 12 )

[node name="SoftCollision" parent="." instance=ExtResource( 7 )]
visible = false

[node name="CollisionShape2D" parent="SoftCollision" index="0"]
shape = SubResource( 13 )

[node name="WanderController" parent="." instance=ExtResource( 8 )]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Start = SubResource( 14 )
anims/Stop = SubResource( 15 )
[connection signal="no_health" from="BatStats" to="." method="_on_BatStats_no_health"]
[connection signal="area_entered" from="Hurtbox" to="." method="_on_Hurtbox_area_entered"]
[connection signal="invincibility_ended" from="Hurtbox" to="." method="_on_Hurtbox_invincibility_ended"]
[connection signal="invincibility_started" from="Hurtbox" to="." method="_on_Hurtbox_invincibility_started"]

[editable path="Hurtbox"]

[editable path="PlayerDetectionZone"]

[editable path="Hitbox"]

[editable path="SoftCollision"]
